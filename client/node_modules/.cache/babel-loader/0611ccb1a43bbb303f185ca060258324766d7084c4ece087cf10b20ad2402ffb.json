{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Pie } from 'react-chartjs-2';\n// import Header from './components/header';\n// import Footer from './components/footer';\n// import './components/Prediction.css';\n\n// const Prediction = () => {\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [answer, setAnswer] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [chartData, setChartData] = useState(null);\n\n//   const questions = [\n//     \"Predicted seat count for BJP\",\n//     \"Seat changes compared to previous election\",\n//     \"Party likely to win most seats\",\n//     \"BJP maintaining majority\",\n//     \"Congress gaining more seats\",\n//     \"Party likely to experience decline in support\",\n//     \"Chance of coalition government forming\",\n//     \"Party with highest probability of forming government\",\n//     \"Expected overall performance of each party\",\n//     \"Predicted change in seat count for each party\",\n//   ];\n\n//   useEffect(() => {\n//     axios.get('/predicted_seat_counts.json')\n//       .then((response) => {\n//         const data = response.data;\n//         setChartData({\n//           labels: Object.keys(data),\n//           datasets: [{\n//             label: 'Seat Distribution',\n//             data: Object.values(data),\n//             backgroundColor: [\n//               '#FF6384',\n//               '#36A2EB',\n//               '#FFCE56',\n//               '#FF9F40',\n//               '#FFCD56',\n//               '#4BC0C0',\n//               '#9966FF',\n//               '#FF6384'\n//             ],\n//             hoverBackgroundColor: [\n//               '#FF6384',\n//               '#36A2EB',\n//               '#FFCE56',\n//               '#FF9F40',\n//               '#FFCD56',\n//               '#4BC0C0',\n//               '#9966FF',\n//               '#FF6384'\n//             ]\n//           }]\n//         });\n//       })\n//       .catch((error) => console.error('Error loading chart data:', error));\n//   }, []);\n\n//   const fetchAnswer = async (question) => {\n//     setLoading(true);\n//     try {\n//       const response = await axios.post('http://127.0.0.1:5000/api/predict', {\n//         question: question,\n//       });\n//       setAnswer(response.data.answer);\n//     } catch (error) {\n//       console.error('Error fetching prediction:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\n//       <Header />\n//       <div className=\"main-content\">\n//         {chartData && (\n//           <div className=\"chart-container\">\n//             <Pie data={chartData} />\n//           </div>\n//         )}\n//         <div className=\"prediction-container\">\n//           <h2>Select a Prediction Question</h2>\n//           <select\n//             value={selectedQuestion}\n//             onChange={(e) => setSelectedQuestion(e.target.value)}\n//             className=\"question-dropdown\"\n//           >\n//             <option value=\"\">Select a question...</option>\n//             {questions.map((question, index) => (\n//               <option key={index} value={question}>{question}</option>\n//             ))}\n//           </select>\n//           <button\n//             onClick={() => fetchAnswer(selectedQuestion)}\n//             className=\"btn btn-primary\"\n//             disabled={!selectedQuestion || loading}\n//           >\n//             Get Prediction\n//           </button>\n//           {loading && <div className=\"loading\">Loading...</div>}\n//           {answer && <div className=\"answer\" dangerouslySetInnerHTML={{ __html: answer }} />}\n//         </div>\n//       </div>\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default Prediction;","map":{"version":3,"names":[],"sources":["C:/Users/bandi/OneDrive/Documents/GitHub/Psephologist_LLM/client/src/prediction.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { Pie } from 'react-chartjs-2';\n// import Header from './components/header';\n// import Footer from './components/footer';\n// import './components/Prediction.css';\n\n// const Prediction = () => {\n//   const [selectedQuestion, setSelectedQuestion] = useState('');\n//   const [answer, setAnswer] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [chartData, setChartData] = useState(null);\n\n//   const questions = [\n//     \"Predicted seat count for BJP\",\n//     \"Seat changes compared to previous election\",\n//     \"Party likely to win most seats\",\n//     \"BJP maintaining majority\",\n//     \"Congress gaining more seats\",\n//     \"Party likely to experience decline in support\",\n//     \"Chance of coalition government forming\",\n//     \"Party with highest probability of forming government\",\n//     \"Expected overall performance of each party\",\n//     \"Predicted change in seat count for each party\",\n//   ];\n\n//   useEffect(() => {\n//     axios.get('/predicted_seat_counts.json')\n//       .then((response) => {\n//         const data = response.data;\n//         setChartData({\n//           labels: Object.keys(data),\n//           datasets: [{\n//             label: 'Seat Distribution',\n//             data: Object.values(data),\n//             backgroundColor: [\n//               '#FF6384',\n//               '#36A2EB',\n//               '#FFCE56',\n//               '#FF9F40',\n//               '#FFCD56',\n//               '#4BC0C0',\n//               '#9966FF',\n//               '#FF6384'\n//             ],\n//             hoverBackgroundColor: [\n//               '#FF6384',\n//               '#36A2EB',\n//               '#FFCE56',\n//               '#FF9F40',\n//               '#FFCD56',\n//               '#4BC0C0',\n//               '#9966FF',\n//               '#FF6384'\n//             ]\n//           }]\n//         });\n//       })\n//       .catch((error) => console.error('Error loading chart data:', error));\n//   }, []);\n\n//   const fetchAnswer = async (question) => {\n//     setLoading(true);\n//     try {\n//       const response = await axios.post('http://127.0.0.1:5000/api/predict', {\n//         question: question,\n//       });\n//       setAnswer(response.data.answer);\n//     } catch (error) {\n//       console.error('Error fetching prediction:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\n//       <Header />\n//       <div className=\"main-content\">\n//         {chartData && (\n//           <div className=\"chart-container\">\n//             <Pie data={chartData} />\n//           </div>\n//         )}\n//         <div className=\"prediction-container\">\n//           <h2>Select a Prediction Question</h2>\n//           <select\n//             value={selectedQuestion}\n//             onChange={(e) => setSelectedQuestion(e.target.value)}\n//             className=\"question-dropdown\"\n//           >\n//             <option value=\"\">Select a question...</option>\n//             {questions.map((question, index) => (\n//               <option key={index} value={question}>{question}</option>\n//             ))}\n//           </select>\n//           <button\n//             onClick={() => fetchAnswer(selectedQuestion)}\n//             className=\"btn btn-primary\"\n//             disabled={!selectedQuestion || loading}\n//           >\n//             Get Prediction\n//           </button>\n//           {loading && <div className=\"loading\">Loading...</div>}\n//           {answer && <div className=\"answer\" dangerouslySetInnerHTML={{ __html: answer }} />}\n//         </div>\n//       </div>\n//       <Footer />\n//     </div>\n//   );\n// };\n\n// export default Prediction;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}